#!/usr/bin/env node

/**
 * ================================================================================
 * üìß AGENTE ELITE: EMAIL FUNNEL MASTER
 * üéØ Misi√≥n: Convertir visitantes en compradores recurrentes v√≠a email
 * ================================================================================
 */

const { GoogleGenerativeAI } = require('@google/generative-ai');

class EmailFunnelMaster {
  constructor() {
    this.shopifyStore = process.env.SHOPIFY_STORE_URL;
    this.shopifyToken = process.env.SHOPIFY_ACCESS_TOKEN;
    this.geminiKey = process.env.GEMINI_API_KEY;
    this.genAI = new GoogleGenerativeAI(this.geminiKey);
  }

  async ejecutarFunnelAutomatico() {
    console.log('\n' + '='.repeat(80));
    console.log('üìß AGENTE ELITE: EMAIL FUNNEL MASTER');
    console.log('üéØ Misi√≥n: Maximizar lifetime value con email marketing');
    console.log('='.repeat(80) + '\n');

    const reporte = {
      timestamp: new Date().toISOString(),
      secuencias_creadas: 0,
      emails_generados: 0,
      segmentos_configurados: 0,
      automaciones: []
    };

    try {
      // PASO 1: Crear secuencia de bienvenida
      console.log('üëã [1/8] Creando secuencia de bienvenida...\n');
      const secuenciaBienvenida = await this.crearSecuenciaBienvenida();
      reporte.secuencias_creadas++;
      reporte.emails_generados += secuenciaBienvenida.length;
      console.log(`   ‚úÖ ${secuenciaBienvenida.length} emails de bienvenida creados\n`);

      // PASO 2: Crear secuencia de carrito abandonado
      console.log('üõí [2/8] Configurando recuperaci√≥n de carritos abandonados...\n');
      const secuenciaCarrito = await this.crearSecuenciaCarritoAbandonado();
      reporte.secuencias_creadas++;
      reporte.emails_generados += secuenciaCarrito.length;
      console.log(`   ‚úÖ ${secuenciaCarrito.length} emails de recuperaci√≥n creados\n`);

      // PASO 3: Crear secuencia post-compra
      console.log('üì¶ [3/8] Secuencia post-compra (upsell/cross-sell)...\n');
      const secuenciaPostCompra = await this.crearSecuenciaPostCompra();
      reporte.secuencias_creadas++;
      reporte.emails_generados += secuenciaPostCompra.length;
      console.log(`   ‚úÖ ${secuenciaPostCompra.length} emails post-compra creados\n`);

      // PASO 4: Crear secuencia de reactivaci√≥n
      console.log('üîÑ [4/8] Secuencia de reactivaci√≥n (clientes inactivos)...\n');
      const secuenciaReactivacion = await this.crearSecuenciaReactivacion();
      reporte.secuencias_creadas++;
      reporte.emails_generados += secuenciaReactivacion.length;
      console.log(`   ‚úÖ ${secuenciaReactivacion.length} emails de reactivaci√≥n creados\n`);

      // PASO 5: Configurar segmentaci√≥n
      console.log('üë• [5/8] Configurando segmentos de audiencia...\n');
      const segmentos = await this.configurarSegmentos();
      reporte.segmentos_configurados = segmentos.length;
      console.log(`   ‚úÖ ${segmentos.length} segmentos configurados\n`);

      // PASO 6: Crear campa√±as promocionales
      console.log('üéÅ [6/8] Generando campa√±as promocionales...\n');
      const campanasPromo = await this.crearCampanasPromocionales();
      reporte.emails_generados += campanasPromo.length;
      console.log(`   ‚úÖ ${campanasPromo.length} campa√±as promocionales listas\n`);

      // PASO 7: Configurar A/B testing autom√°tico
      console.log('üß™ [7/8] Configurando A/B testing de subject lines...\n');
      const abTests = await this.configurarABTesting();
      console.log(`   ‚úÖ ${abTests.length} tests configurados\n`);

      // PASO 8: Configurar m√©tricas y reportes
      console.log('üìä [8/8] Configurando tracking de m√©tricas...\n');
      const metricas = await this.configurarMetricas();

      await this.guardarReporte(reporte);
      await this.guardarSecuencias({
        bienvenida: secuenciaBienvenida,
        carrito_abandonado: secuenciaCarrito,
        post_compra: secuenciaPostCompra,
        reactivacion: secuenciaReactivacion,
        promocionales: campanasPromo
      });

      console.log('\n' + '='.repeat(80));
      console.log('üèÜ EMAIL MARKETING AUTOMATION ACTIVADO');
      console.log(`üìß Total emails generados: ${reporte.emails_generados}`);
      console.log(`üîÑ Secuencias autom√°ticas: ${reporte.secuencias_creadas}`);
      console.log(`üë• Segmentos: ${reporte.segmentos_configurados}`);
      console.log('‚è±Ô∏è  Conversi√≥n esperada: 15-25% en carritos abandonados');
      console.log('='.repeat(80) + '\n');

      return reporte;

    } catch (error) {
      console.error('‚ùå Error en email funnel:', error.message);
      throw error;
    }
  }

  async crearSecuenciaBienvenida() {
    const model = this.genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });

    const prompt = `Crea una secuencia de 3 emails de bienvenida para e-commerce:

EMAIL 1 - Bienvenida + Descuento (env√≠o inmediato)
EMAIL 2 - Productos m√°s vendidos (24h despu√©s)
EMAIL 3 - Historia de marca + valores (48h despu√©s)

Para cada email genera:
- Subject line impactante (50 caracteres max)
- Preview text (80 caracteres)
- Cuerpo del email (HTML simple, conversacional)
- CTA claro
- P.S. con urgencia/beneficio extra

Tono: Amigable, cercano, LATAM
Objetivo: Primera compra con 15% descuento

Formato JSON:
{
  "emails": [
    {
      "numero": 1,
      "delay_horas": 0,
      "subject": "...",
      "preview": "...",
      "cuerpo_html": "...",
      "cta_texto": "...",
      "cta_url": "...",
      "ps": "..."
    }
  ]
}`;

    const result = await model.generateContent(prompt);
    let texto = result.response.text().trim();
    texto = texto.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim();
    
    try {
      const parsed = JSON.parse(texto);
      return parsed.emails || [];
    } catch (e) {
      return this.secuenciaBienvenidaFallback();
    }
  }

  secuenciaBienvenidaFallback() {
    return [
      {
        numero: 1,
        delay_horas: 0,
        subject: 'üéÅ ¬°Bienvenido! Aqu√≠ est√° tu 15% OFF',
        preview: 'Empieza con el pie derecho. Tu cup√≥n te espera...',
        cuerpo_html: `
          <h2>¬°Bienvenido a Goio Store! üéâ</h2>
          <p>Estamos felices de tenerte aqu√≠. Para celebrar, tenemos un regalo para ti:</p>
          <h3 style="color: #ff6b6b;">15% DE DESCUENTO</h3>
          <p>Usa el c√≥digo: <strong>BIENVENIDO15</strong></p>
          <p>V√°lido por 48 horas en tu primera compra.</p>
        `,
        cta_texto: 'Ver Productos',
        cta_url: 'https://{STORE_URL}/collections/all',
        ps: 'P.D. Este cup√≥n expira en 48h. ¬°No te lo pierdas!'
      },
      {
        numero: 2,
        delay_horas: 24,
        subject: '‚≠ê Los favoritos de nuestros clientes',
        preview: 'Estos productos vuelan de las estanter√≠as...',
        cuerpo_html: `
          <h2>¬øA√∫n no sabes qu√© comprar?</h2>
          <p>Estos son los productos que nuestros clientes aman:</p>
          <p>‚úÖ Alta calidad verificada<br>
          ‚úÖ Env√≠o r√°pido garantizado<br>
          ‚úÖ Satisfacci√≥n 100%</p>
          <p><strong>Recuerda:</strong> Tu 15% OFF sigue activo.</p>
        `,
        cta_texto: 'Ver Best Sellers',
        cta_url: 'https://{STORE_URL}/collections/best-sellers',
        ps: 'P.D. Solo quedan 24h de tu descuento de bienvenida.'
      },
      {
        numero: 3,
        delay_horas: 48,
        subject: '‚ù§Ô∏è M√°s que una tienda: nuestra historia',
        preview: 'Por qu√© hacemos lo que hacemos...',
        cuerpo_html: `
          <h2>Somos m√°s que una tienda online</h2>
          <p>Nuestra misi√≥n es simple: traerte los mejores productos al mejor precio, con un servicio que supere tus expectativas.</p>
          <p>Cada producto es seleccionado cuidadosamente pensando en ti.</p>
          <p>√önete a miles de clientes satisfechos en Per√∫ y Latinoam√©rica.</p>
        `,
        cta_texto: 'Conocer M√°s',
        cta_url: 'https://{STORE_URL}/pages/about',
        ps: 'P.D. ¬øDudas? Responde este email, estamos para ayudarte.'
      }
    ];
  }

  async crearSecuenciaCarritoAbandonado() {
    const model = this.genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });

    const prompt = `Crea secuencia de recuperaci√≥n de carrito abandonado (3 emails):

EMAIL 1 - Recordatorio suave (1 hora despu√©s de abandono)
EMAIL 2 - Incentivo + urgencia (24h despu√©s)
EMAIL 3 - √öltima oportunidad + descuento adicional (48h despu√©s)

Incluye:
- Subject lines con urgencia creciente
- Mostrar productos abandonados
- Testimonios/social proof
- Garant√≠as (devoluci√≥n, env√≠o)
- Descuento progresivo (0%, 10%, 15%)

Formato JSON igual al anterior.`;

    const result = await model.generateContent(prompt);
    let texto = result.response.text().trim();
    texto = texto.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim();
    
    try {
      const parsed = JSON.parse(texto);
      return parsed.emails || [];
    } catch (e) {
      return this.secuenciaCarritoFallback();
    }
  }

  secuenciaCarritoFallback() {
    return [
      {
        numero: 1,
        delay_horas: 1,
        subject: 'üõí ¬øOlvidaste algo en tu carrito?',
        preview: 'Tus productos te est√°n esperando...',
        cuerpo_html: `
          <h2>¬°Hola! Notamos que dejaste algo üëÄ</h2>
          <p>Tus productos siguen en el carrito esper√°ndote:</p>
          <p>[PRODUCTOS ABANDONADOS]</p>
          <p>Completa tu compra ahora, solo toma 2 minutos.</p>
        `,
        cta_texto: 'Completar Compra',
        cta_url: '{CHECKOUT_URL}',
        ps: 'P.D. Stock limitado, asegura tu compra ahora.'
      },
      {
        numero: 2,
        delay_horas: 24,
        subject: '‚è∞ Tu carrito expira pronto + 10% OFF',
        preview: '¬°Sorpresa! Te damos un descuento extra...',
        cuerpo_html: `
          <h2>No queremos que te lo pierdas üíî</h2>
          <p>Para ayudarte a decidir, te damos un <strong>10% OFF adicional</strong>:</p>
          <p>C√≥digo: <strong>RECUPERA10</strong></p>
          <p>[PRODUCTOS ABANDONADOS]</p>
          <p>‚≠ê M√°s de 1,000 clientes satisfechos<br>
          ‚úÖ Env√≠o r√°pido garantizado<br>
          üõ°Ô∏è 30 d√≠as de garant√≠a</p>
        `,
        cta_texto: 'Usar Mi Descuento',
        cta_url: '{CHECKOUT_URL}',
        ps: 'P.D. Este descuento expira en 24h.'
      },
      {
        numero: 3,
        delay_horas: 48,
        subject: 'üö® √öLTIMA OPORTUNIDAD: 15% OFF',
        preview: '√öltimo llamado antes de que se agote...',
        cuerpo_html: `
          <h2>Esta es tu √∫ltima oportunidad üîî</h2>
          <p>Aumentamos tu descuento a <strong style="color: #ff6b6b;">15% OFF</strong></p>
          <p>C√≥digo: <strong>ULTIMAOPORTUNIDAD15</strong></p>
          <p>[PRODUCTOS ABANDONADOS]</p>
          <p>Despu√©s de esto, tu carrito se vaciar√° y estos productos pueden agotarse.</p>
          <p>¬øTe lo vas a perder?</p>
        `,
        cta_texto: '¬°Quiero Mi 15% OFF!',
        cta_url: '{CHECKOUT_URL}',
        ps: 'P.D. Este email es el √∫ltimo. Decide ahora.'
      }
    ];
  }

  async crearSecuenciaPostCompra() {
    return [
      {
        numero: 1,
        delay_horas: 2,
        subject: '‚úÖ ¬°Gracias por tu compra! Esto es lo que sigue',
        preview: 'Tu pedido est√° confirmado. Detalles dentro...',
        cuerpo_html: `
          <h2>¬°Tu pedido est√° confirmado! üéâ</h2>
          <p>N√∫mero de orden: [ORDER_NUMBER]</p>
          <p>Recibir√°s un email cuando tu paquete est√© en camino.</p>
          <p>Tiempo estimado de entrega: 2-4 d√≠as h√°biles.</p>
          <p>¬øDudas? Estamos aqu√≠ para ayudarte.</p>
        `,
        cta_texto: 'Rastrear Pedido',
        cta_url: '{ORDER_STATUS_URL}',
        ps: 'P.D. Revisa tu email regularmente para actualizaciones.'
      },
      {
        numero: 2,
        delay_horas: 168, // 7 d√≠as
        subject: '‚ù§Ô∏è ¬øQu√© tal tu compra? + Oferta exclusiva',
        preview: 'Queremos saber tu opini√≥n (y tenemos un regalo)...',
        cuerpo_html: `
          <h2>¬øC√≥mo estuvo tu experiencia?</h2>
          <p>Nos encantar√≠a saber qu√© piensas de tu compra.</p>
          <p>Como agradecimiento, tenemos un <strong>20% OFF</strong> en tu pr√≥xima compra:</p>
          <p>C√≥digo: <strong>CLIENTEVIP20</strong></p>
          <p>Adem√°s, estos productos podr√≠an interesarte:</p>
          <p>[PRODUCTOS RELACIONADOS - CROSS SELL]</p>
        `,
        cta_texto: 'Dejar Rese√±a',
        cta_url: '{REVIEW_URL}',
        ps: 'P.D. Tu opini√≥n nos ayuda a mejorar cada d√≠a.'
      },
      {
        numero: 3,
        delay_horas: 336, // 14 d√≠as
        subject: 'üéÅ Regalo especial para clientes VIP',
        preview: 'Solo para ti: acceso anticipado a nuevos productos...',
        cuerpo_html: `
          <h2>Eres cliente VIP üëë</h2>
          <p>Como agradecimiento por tu compra, tienes acceso exclusivo a:</p>
          <p>‚ú® Nuevos productos antes que nadie<br>
          üéØ Descuentos exclusivos<br>
          üì¶ Env√≠o gratis en pedidos +$50</p>
          <p>¬øListo para tu pr√≥xima compra?</p>
        `,
        cta_texto: 'Ver Novedades VIP',
        cta_url: '{STORE_URL}/collections/new',
        ps: 'P.D. Este beneficio es solo para clientes como t√∫.'
      }
    ];
  }

  async crearSecuenciaReactivacion() {
    return [
      {
        numero: 1,
        delay_dias: 30,
        subject: 'üò¢ Te extra√±amos... ¬øTodo bien?',
        preview: 'Han pasado 30 d√≠as. Vuelve con 25% OFF...',
        cuerpo_html: `
          <h2>¬°Hace tiempo que no te vemos! üíî</h2>
          <p>Han pasado 30 d√≠as desde tu √∫ltima visita.</p>
          <p>Para que vuelvas, tenemos un regalo especial:</p>
          <h3>25% DE DESCUENTO</h3>
          <p>C√≥digo: <strong>TEVOLVEMOS25</strong></p>
          <p>Mira lo nuevo que tenemos para ti...</p>
        `,
        cta_texto: 'Ver Novedades',
        cta_url: '{STORE_URL}',
        ps: 'P.D. ¬øHubo alg√∫n problema? Responde este email.'
      },
      {
        numero: 2,
        delay_dias: 60,
        subject: 'üéØ √öltima oportunidad: 30% OFF para ti',
        preview: 'No queremos perderte. Descuento m√°ximo activado...',
        cuerpo_html: `
          <h2>Esto es lo m√°ximo que podemos ofrecer üôè</h2>
          <p>30% DE DESCUENTO en toda la tienda.</p>
          <p>C√≥digo: <strong>REGRESAMAX30</strong></p>
          <p>Si ya no quieres recibir emails, lo entendemos.</p>
          <p>Pero antes, dale una √∫ltima oportunidad a estos productos...</p>
        `,
        cta_texto: 'Usar Mi 30% OFF',
        cta_url: '{STORE_URL}',
        ps: 'P.D. Si no compras en 30 d√≠as, dejaremos de escribirte.'
      }
    ];
  }

  async crearCampanasPromocionales() {
    const model = this.genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });

    const ocasiones = [
      'Black Friday',
      'Cyber Monday',
      'D√≠a de la Madre',
      'D√≠a del Padre',
      'Navidad',
      'A√±o Nuevo'
    ];

    const campanas = [];

    for (const ocasion of ocasiones) {
      const prompt = `Crea un email promocional para ${ocasion}:

Incluye:
- Subject line urgente y atractivo
- Oferta irresistible (descuento % o 2x1)
- Countdown timer mental
- Beneficios m√∫ltiples
- Testimonios breves
- CTA repetido 2-3 veces

Formato JSON igual.`;

      try {
        const result = await model.generateContent(prompt);
        let texto = result.response.text().trim();
        texto = texto.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim();
        const parsed = JSON.parse(texto);
        campanas.push({
          ocasion,
          ...parsed
        });
      } catch (e) {
        campanas.push({
          ocasion,
          subject: `üî• ${ocasion}: Hasta 50% OFF`,
          preview: 'Las mejores ofertas del a√±o. No te lo pierdas...',
          cuerpo_html: `<h2>${ocasion} - Ofertas Especiales</h2><p>Descuentos de hasta 50% en productos seleccionados.</p>`,
          cta_texto: 'Ver Ofertas',
          cta_url: '{STORE_URL}/collections/sale'
        });
      }
    }

    return campanas;
  }

  async configurarSegmentos() {
    return [
      {
        nombre: 'Nuevos Suscriptores',
        criterio: 'Suscrito hace menos de 7 d√≠as, sin compras',
        secuencia: 'bienvenida'
      },
      {
        nombre: 'Carrito Abandonado',
        criterio: 'Agreg√≥ productos pero no compr√≥ en √∫ltimas 24h',
        secuencia: 'carrito_abandonado'
      },
      {
        nombre: 'Clientes VIP',
        criterio: 'M√°s de 3 compras o gasto total >$200',
        secuencia: 'vip_exclusivo'
      },
      {
        nombre: 'Inactivos',
        criterio: 'Sin compras en √∫ltimos 30 d√≠as',
        secuencia: 'reactivacion'
      },
      {
        nombre: 'Compradores Recientes',
        criterio: 'Compra en √∫ltimos 7 d√≠as',
        secuencia: 'post_compra'
      }
    ];
  }

  async configurarABTesting() {
    return [
      {
        test: 'Subject Line - Bienvenida Email 1',
        variante_a: 'üéÅ ¬°Bienvenido! Aqu√≠ est√° tu 15% OFF',
        variante_b: '¬°Tu descuento de bienvenida te espera!',
        metrica: 'open_rate',
        ganador_auto: true
      },
      {
        test: 'CTA Text - Carrito Abandonado',
        variante_a: 'Completar Compra',
        variante_b: '¬°Quiero Mi Producto!',
        metrica: 'click_rate',
        ganador_auto: true
      }
    ];
  }

  async configurarMetricas() {
    console.log('   ‚úÖ Open Rate tracking activado');
    console.log('   ‚úÖ Click Rate tracking activado');
    console.log('   ‚úÖ Conversion Rate tracking activado');
    console.log('   ‚úÖ Revenue per email calculado');
    console.log('   ‚úÖ Reportes semanales autom√°ticos');

    return {
      metricas_principales: ['open_rate', 'click_rate', 'conversion_rate', 'revenue'],
      alertas: [
        { metrica: 'open_rate', umbral: '<15%', accion: 'Mejorar subject lines' },
        { metrica: 'click_rate', umbral: '<2%', accion: 'Mejorar CTAs y copy' }
      ]
    };
  }

  async guardarReporte(reporte) {
    const fs = require('fs').promises;
    const path = require('path');
    
    const timestamp = new Date().toISOString().replace(/:/g, '-');
    const reportDir = path.join(__dirname, '../reports/email-funnel');
    
    await fs.mkdir(reportDir, { recursive: true });
    
    const jsonPath = path.join(reportDir, `email-report-${timestamp}.json`);
    await fs.writeFile(jsonPath, JSON.stringify(reporte, null, 2));
  }

  async guardarSecuencias(secuencias) {
    const fs = require('fs').promises;
    const path = require('path');
    
    const timestamp = new Date().toISOString().replace(/:/g, '-');
    const reportDir = path.join(__dirname, '../reports/email-funnel');
    
    await fs.mkdir(reportDir, { recursive: true });
    
    const seqPath = path.join(reportDir, `secuencias-${timestamp}.json`);
    await fs.writeFile(seqPath, JSON.stringify(secuencias, null, 2));
    
    console.log(`\nüìß Secuencias guardadas: ${seqPath}`);
  }
}

// Ejecutar si se llama directamente
if (require.main === module) {
  const agente = new EmailFunnelMaster();
  agente.ejecutarFunnelAutomatico()
    .then(() => process.exit(0))
    .catch(error => {
      console.error('Error fatal:', error);
      process.exit(1);
    });
}

module.exports = EmailFunnelMaster;
