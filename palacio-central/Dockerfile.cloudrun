# 游댬 DOCKERFILE OPTIMIZADO PARA GOOGLE CLOUD RUN
# Proyecto: Goio Imperios - Palacio Central
# Fecha: 16 de octubre de 2025
# Multi-stage build para minimizar tama침o final

# ============================================
# STAGE 1: Builder - Instalar dependencias
# ============================================
FROM node:20-alpine AS builder

# Metadata
LABEL maintainer="Goio Imperios <dev@goio.store>"
LABEL description="Backend Palacio Central para Cloud Run"
LABEL version="1.0.0"

# Variables de build
ARG NODE_ENV=production
ENV NODE_ENV=${NODE_ENV}

# Crear usuario no-root para seguridad
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# Directorio de trabajo
WORKDIR /app

# Copiar package files primero (mejor cache)
COPY package*.json ./

# Instalar solo dependencias de producci칩n
# Usar npm install si no hay package-lock.json, npm ci si existe
RUN if [ -f package-lock.json ]; then \
        npm ci --only=production --ignore-scripts; \
    else \
        npm install --only=production --ignore-scripts; \
    fi && \
    npm cache clean --force

# Copiar c칩digo fuente
COPY --chown=nodejs:nodejs . .

# Crear directorios necesarios
RUN mkdir -p logs/imperial/supervisor \
             logs/imperial/operations \
             logs/imperial/marketing \
             logs/imperial/shop-sync \
             logs/imperial/ia \
             reports && \
    chown -R nodejs:nodejs logs reports

# ============================================
# STAGE 2: Runner - Imagen final m칤nima
# ============================================
FROM node:20-alpine

# Instalar curl para healthchecks y Python3 para scripts de agentes ELITE
RUN apk add --no-cache curl python3 py3-pip gcc musl-dev python3-dev && \
    pip3 install --no-cache-dir --break-system-packages \
        pytrends \
        requests \
        google-generativeai

# Variables de entorno base
ENV NODE_ENV=production \
    PORT=8080 \
    LOG_LEVEL=info \
    TZ=America/Lima

# Crear usuario no-root
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# Directorio de trabajo
WORKDIR /app

# Copiar node_modules y c칩digo desde builder
COPY --from=builder --chown=nodejs:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=nodejs:nodejs /app/package*.json ./
COPY --from=builder --chown=nodejs:nodejs /app/agents ./agents
COPY --from=builder --chown=nodejs:nodejs /app/imperios ./imperios
COPY --from=builder --chown=nodejs:nodejs /app/config ./config
COPY --from=builder --chown=nodejs:nodejs /app/utils ./utils
COPY --from=builder --chown=nodejs:nodejs /app/scripts ./scripts
COPY --from=builder --chown=nodejs:nodejs /app/prompts ./prompts
COPY --from=builder --chown=nodejs:nodejs /app/start.js ./
COPY --from=builder --chown=nodejs:nodejs /app/logs ./logs
COPY --from=builder --chown=nodejs:nodejs /app/reports ./reports

# Verificar que agentes ELITE existen
RUN test -f agents/marketintelligence.js && \
    test -f agents/pricinggenius.js && \
    test -f agents/conversionoptimizer.js || \
    (echo "ERROR: Agentes ELITE no encontrados" && exit 1)

# Cambiar a usuario no-root
USER nodejs

# Exponer puerto Cloud Run est치ndar
EXPOSE 8080

# Healthcheck (Cloud Run lo usa internamente)
HEALTHCHECK --interval=30s --timeout=5s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Comando de inicio
CMD ["node", "start.js"]
